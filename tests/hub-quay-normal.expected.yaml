---
# Source: quay/templates/rbac/quay-admin-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: quay-admin-sa
  namespace: quay-enterprise
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
---
# Source: quay/templates/secret/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: quay-init-config-bundle-secret
  namespace: quay-enterprise
  annotations:
    argocd.argoproj.io/sync-wave: "4"
type: Opaque
stringData:
  config.yaml: |
    FEATURE_USER_INITIALIZE: true
    FEATURE_GENERAL_OCI_SUPPORT: true
    BROWSER_API_CALLS_XHR_ONLY: false
    SUPER_USERS:
    - quayadmin
    FEATURE_USER_CREATION: true
    ALLOW_PULLS_WITHOUT_STRICT_LOGGING: false
    AUTHENTICATION_TYPE: Database
    DEFAULT_TAG_EXPIRATION: 2w
    ENTERPRISE_LOGO_URL: /static/img/RH_Logo_Quay_Black_UX-
    FEATURE_BUILD_SUPPORT: false
    FEATURE_DIRECT_LOGIN: true
    FEATURE_MAILING: false
    REGISTRY_TITLE: Red Hat Quay
    REGISTRY_TITLE_SHORT: Quay
    TEAM_RESYNC_STALE_TIME: 60m
    TESTING: false
    CREATE_NAMESPACE_ON_PUSH: true
---
# Source: quay/templates/quayRegistry/cm-create-quaye-pull-secret.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  # quaye abbrev. for Quay Enterprise
  name: create-quaye-pull-secret
  namespace: quay-enterprise
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
data:
  create-quaye-pull-secret.sh: |
      #!/bin/bash -e

      function quay_cmd() {
          DATA='{}'
          if [ ! -z "$4" ]; then
              DATA=$4
          fi
          echo "[$1] $2 $3 --data $DATA" 1>&2
          AUTH="Fake: dummy"
          if [ $1 = "Basic" ]; then
              COUNT=$(oc -n $QUAY_NAMESPACE get --ignore-not-found=true secret $QUAY_USER_SECRET | wc -l)
              if [ $COUNT -gt 1 ]; then
                  BASIC=$(oc -n $QUAY_NAMESPACE extract secret/$QUAY_USER_SECRET --keys=basic --to=-)
              fi
              AUTH="Authorization: Basic $BASIC"

          elif [ $1 = "Bearer" ]; then
              AUTH="Authorization: Bearer $TOKEN"
          fi
          curl -X $2 $CURL_OPTS -H 'Content-Type: application/json'  -H "$AUTH" https://$QUAY_HOST$3 --data "$DATA"
          echo "[INFO] Success" 1>&2
      }

      CURL_OPTS="-fsk"
      QUAY_USER_SECRET=quay-user

      env | grep QUAY | grep -v QUAY_REGISTRY
      if [ -z "$QUAY_NAMESPACE" ]; then
          QUAY_NAMESPACE=quay-enterprise
      fi
      if [ -z "$QUAY_HOST" ]; then
          QUAY_HOST="quay-registry-quay-quay-enterprise.apps.hub.example.com"
      fi
      if [ -z "$QUAY_USER" ]; then
          QUAY_USER=developer1
      fi
      if [ -z "$QUAY_USER_EMAIL" ]; then
          QUAY_USER_EMAIL=developer1@myorg.com
      fi
      if [ -z "$QUAY_ORG" ]; then
          QUAY_ORG=devel
      fi
      if [ -z "$QUAY_ORG_EMAIL" ]; then
          QUAY_ORG_EMAIL=devel@myorg.com
      fi
      if [ -z "$QUAY_REPO" ]; then
          QUAY_REPO=example
      fi

      echo "[INFO] Looking for initial token ..."
      SECRET_NAME=quay-init-token
      COUNT=$(oc -n $QUAY_NAMESPACE get --ignore-not-found=true secret $SECRET_NAME | wc -l)
      if [ $COUNT = 0 ]; then
          INITPASS=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 20 ; echo ''  )

          echo "[INFO] Destroy any previous secrets ..."
          oc -n $QUAY_NAMESPACE delete --ignore-not-found=true secret $QUAY_USER_SECRET
          oc -n openshift-operators delete --ignore-not-found=true secret quay-pull-secret

          # Invoke API and add quay user to the API - initiates API
          echo "[INFO] Creating default user..."
          JSONTOKEN=$(quay_cmd None POST /api/v1/user/initialize "{ \"username\": \"quayadmin\", \"password\":\"$INITPASS\", \"email\": \"quayadmin@example.com\", \"access_token\": true}")

          echo "[INFO] Creating $SECRET_NAME ..."
          oc -n $QUAY_NAMESPACE create secret generic $SECRET_NAME --from-literal=token=$JSONTOKEN --from-literal=password=$INITPASS
      fi

      TOKEN=$(oc -n $QUAY_NAMESPACE extract secret/$SECRET_NAME --keys=token --to=- | grep access_token | cut -d : -f2 | awk -F\" '{print $2}')

      echo "[INFO] Checking our bearer token is still valid ..."
      COUNT=$(quay_cmd Bearer GET /api/v1/superuser/users/ | grep \"$QUAY_USER\" | wc -l)
      if [ $COUNT = 0 ]; then
          # Either the super user doesn't exist, or the token is invalid... determine which...

          COUNT=$(quay_cmd Basic GET /api/v1/organization/$QUAY_ORG | wc -l)
          if [ $COUNT -gt 0 ]; then
              # We found the $QUAY_USER_SECRET secret, with valid basic auth details, and used it to obtain the previously created organization...
              # Conclude the bearer token has expired (150min lifetime)
              echo "Bearer token has expired"
              exit 0
          fi
      fi

      echo "[INFO] Looking for our superuser ..."
      COUNT=$(quay_cmd Bearer GET /api/v1/superuser/users/ | grep \"$QUAY_USER\" | wc -l)
      if [ $COUNT = 0 ]; then
          echo "[INFO] Creating $QUAY_USER user ..."
          RESPONSE=$(quay_cmd Bearer POST /api/v1/superuser/users/ "{ \"username\": \"$QUAY_USER\", \"email\": \"$QUAY_USER_EMAIL\", \"access_token\": true}")

          QUAY_PASSWORD=$(echo $RESPONSE | tr ',' '\n' | grep '"password"' | cut -d \" -f 4)
          BASE64AUTH=`echo -n $QUAY_USER:$QUAY_PASSWORD | base64 -w0`

          echo "[INFO] Creating $QUAY_USER_SECRET secret ..."
          oc -n $QUAY_NAMESPACE create secret generic $QUAY_USER_SECRET --from-literal=token="$RESPONSE" --from-literal=basic="$BASE64AUTH"

          echo "[INFO] Creating quay-pull-secret ..."
          #echo -e "{ \"auths\": { \"$QUAY_HOST\": { \"auth\": \"$BASE64AUTH\" } }}" | oc -n openshift-operators create secret generic quay-pull-secret --from-file=.dockerconfigjson=/dev/stdin --type=kubernetes.io/dockerconfigjson
          echo -e "{ \"auths\": { \"$QUAY_HOST\": { \"auth\": \"$BASE64AUTH\" } }}" | oc -n devsecops-ci create secret generic quay-pull-secret --from-file=.dockerconfigjson=/dev/stdin --type=kubernetes.io/dockerconfigjson
          # https://access.redhat.com/solutions/5462311
          # Requires CLIENTID to be added to DIRECT_OAUTH_CLIENTID_WHITELIST for this to work
          # If it worked, we could create a new OAuth token when the original one expires after 150min
          ####
          # CLIENTID=$(quay_cmd Bearer GET /api/v1/organization/$QUAY_ORG/applications | sed -e 's/{/\n/g' | grep "\"name\": \"$APPLICATION\"" | sed -e 's/,/\n/g' | grep client_id | awk '{print $2}' | sed 's/"//g')
          # quay_cmd Basic PUT "/oauth/authorize?response_type=token&client_id=$CLIENTID&scope=org:admin%20repo:admin%20repo:create%20repo:read%20repo:write%20super:user%20user:admin%20user:read&redirect_uri=https://$QUAY_HOST%2Foauth%2Flocalapp"
      fi

      echo "[INFO] Looking for initial organization ..."
      COUNT=$(quay_cmd Bearer GET /api/v1/organization/$QUAY_ORG | grep -v not_found | wc -l)
      if [ $COUNT = 0 ]; then
        echo "[INFO] Creating $QUAY_ORG org ..."
        # Email cannot be shared with the initial user
        quay_cmd Bearer POST /api/v1/organization/ "{\"name\": \"$QUAY_ORG\", \"email\": \"$QUAY_ORG_EMAIL\" }"
        quay_cmd Basic GET /api/v1/organization/$QUAY_ORG
      fi

      echo "[INFO] Looking for org application ..."
      # The only way to get another OAuth token is to go to: Organization -> Applications -> {app} -> Generate Token
      # If there was a programatic way to do it here, we could avoid the problem with the bearer token expiring after 150min
      APPLICATION=automation
      COUNT=$(quay_cmd Bearer GET /api/v1/organization/$QUAY_ORG/applications | grep $APPLICATION | wc -l)
      if [ $COUNT = 0 ]; then
        echo "[INFO] Creating $APPLICATION application..."
        quay_cmd Bearer POST /api/v1/organization/$QUAY_ORG/applications "{\"name\": \"$QUAY_ORG-automation\", \"description\": \"automation app\" }"
      fi

      echo "[INFO] Looking for initial repo ..."
      COUNT=$(quay_cmd Bearer GET /api/v1/repository/$QUAY_ORG/$QUAY_REPO | grep -v not_found | wc -l)
      if [ $COUNT = 0 ]; then
          echo "[INFO] Creating $QUAY_REPO repo..."
          quay_cmd Bearer POST /api/v1/repository "{\"namespace\":\"$QUAY_ORG\", \"repository\":\"$QUAY_REPO\", \"visibility\":\"public\", \"description\":\"Development Repo\", \"repo_kind\":\"image\"}"
      fi

      echo "[INFO] Looking for $QUAY_ORG members ..."
      COUNT=$(quay_cmd Bearer GET /api/v1/organization/$QUAY_ORG/team/owners/members | grep "name\": \"$QUAY_USER\"" | wc -l)
      if [ $COUNT = 0 ]; then
          echo "[INFO] Associating $QUAY_USER with $QUAY_ORG ..."
          quay_cmd Bearer PUT /api/v1/organization/$QUAY_ORG/team/owners/members/$QUAY_USER '{}'
      fi

      echo "[INFO] Looking for $QUAY_REPO admins ..."
      COUNT=$(quay_cmd Bearer GET /api/v1/repository/$QUAY_ORG/$QUAY_REPO/permissions/user/$QUAY_USER | grep '"role": "admin"' | wc -l)
      if [ $COUNT = 0 ]; then
          echo "[INFO] Give $QUAY_USER admin rights to the repo ..."
          quay_cmd Bearer PUT /api/v1/repository/$QUAY_ORG/$QUAY_REPO/permissions/user/$QUAY_USER '{ "role": "admin"}'
      fi

      echo "[INFO] Job finished"
---
# Source: quay/templates/rbac/quay-admin-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
  name: quay-admin-role
rules:
  - apiGroups:
      - quay.redhat.com
    resources:
      - quayregistries
    verbs:
      - get
      - list
      - watch
      - delete
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
      - list
      - delete
---
# Source: quay/templates/rbac/quay-admin-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: quay-admin-binding
  annotations:
    argocd.argoproj.io/sync-wave: "-5"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: quay-admin-role
subjects:
  - kind: ServiceAccount
    name: quay-admin-sa
    namespace: quay-enterprise
---
# Source: quay/templates/quayRegistry/job-create-quaye-pull-secret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "10"
  # quaye is abbrev. for Quay Enterprise - diff from quayio
  name: create-quaye-pull-secret
  namespace: quay-enterprise
spec:
  template:
    spec:
      containers:
      - image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
        env:
        - name: QUAY_REPO
          value: "example"
        command:
        - /bin/bash
        - -c
        - |
          oc wait QuayRegistry quay-registry --for=condition=Available=true
          '/tmp/create-quaye-pull-secret.sh'
        name: create-quaye-pull-secret
        volumeMounts:
          - mountPath: /tmp/create-quaye-pull-secret.sh
            name: create-quaye-pull-secret
            subPath: create-quaye-pull-secret.sh
      volumes:
        - name: create-quaye-pull-secret
          configMap:
            name: create-quaye-pull-secret
            defaultMode: 0755
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      serviceAccount: quay-admin-sa
      serviceAccountName: quay-admin-sa
      terminationGracePeriodSeconds: 400
---
# Source: quay/templates/quayRegistry/job-wait-on-quay-app-deploy.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "6"
  name: wait-for-quay-app-deploy
  namespace: quay-enterprise
spec:
  template:
    spec:
      containers:
      - image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
        command:
        - /bin/bash
        - -c
        - |
          # wait for the operator QuayRegistry CR to be available
          oc wait QuayRegistry quay-registry --for=condition=Available=true
        name: wait-for-quay-app
      dnsPolicy: ClusterFirst
      activeDeadlineSeconds: 900
      restartPolicy: Never
      serviceAccountName: quay-admin-sa
      terminationGracePeriodSeconds: 60
---
# Source: quay/templates/quayRegistry/quay-console-link.yaml
apiVersion: console.openshift.io/v1
kind: ConsoleLink
metadata:
  name: example-quay-link
  namespace: quay-enterprise
spec:
  applicationMenu:
    section: Red Hat applications
    imageURL: 'https://upload.wikimedia.org/wikipedia/commons/3/3a/OpenShift-LogoType.svg'
  href: 'https://quay-registry-quay-quay-enterprise.apps.region.example.com'
  location: ApplicationMenu
  text: 'Red Hat Quay Enterprise Registry'
---
# Source: quay/templates/quayRegistry/policy-quay-pull-secret.yaml
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: quay-pull-secret-placement-binding
  namespace: openshift-operators
placementRef:
  name: quay-pull-secret-placement
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
  - name: policy-quay-pull-secret
    kind: Policy
    apiGroup: policy.open-cluster-management.io
---
# Source: quay/templates/quayRegistry/policy-quay-pull-secret.yaml
# We need to run this on any managed cluster but not on the HUB
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: quay-pull-secret-placement
  namespace: openshift-operators
spec:
  # This will go to both devel and secured clusters
  clusterSelector:
    # Using matchExpression because I need it in more than one clusterGroup
    matchExpressions:
      - key: clusterGroup
        operator: In
        values:
          - devel
          - prod
  clusterConditions:
    - status: 'True'
      type: ManagedClusterConditionAvailable
---
# Source: quay/templates/policy-quay-status.yaml
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    policy.open-cluster-management.io/categories: SI System and Information Integrity
    policy.open-cluster-management.io/controls: SI-7 Software Firmware and Information
      Integrity
    policy.open-cluster-management.io/standards: NIST SP 800-53
    argocd.argoproj.io/compare-options: IgnoreExtraneous
  labels:
    open-cluster-management.io/policy-set: openshift-plus
  name: policy-quay-status
  namespace: policies
spec:
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-quay-status
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: quay-registry-quay-app
              namespace: quay-enterprise
            status:
              conditions:
              - status: "True"
                type: Available
        - complianceType: musthave
          objectDefinition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: quay-registry-quay-database
              namespace: quay-enterprise
            status:
              conditions:
              - status: "True"
                type: Available
        remediationAction: inform
        severity: medium
---
# Source: quay/templates/quayRegistry/policy-quay-pull-secret.yaml
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-quay-pull-secret
  namespace: openshift-operators
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    argocd.argoproj.io/sync-options: SkipPrune
    argocd.argoproj.io/sync-wave: "7"
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: quay-pull-secret-configpolicy
          annotations:
            apps.open-cluster-management.io/deployables: "secret"
        spec:
          remediationAction: enforce
          severity: medium
          namespaceSelector:
            include:
              - default
              - openshift-operators
          object-templates:
            - complianceType: mustonlyhave
              objectDefinition:
                kind: Secret
                type: Opaque
                metadata:
                  name: quay-pull-secret
                  namespace: devsecops-ci  # consider changing this to devsecops-ci
                apiVersion: v1
                data:
                  .dockerconfigjson: '{{hub fromSecret "devsecops-ci" "quay-pull-secret" ".dockerconfigjson" hub}}'
---
# Source: quay/templates/quayRegistry/registry.yaml
apiVersion: quay.redhat.com/v1
kind: QuayRegistry
metadata:
  name: quay-registry
  namespace: quay-enterprise
  annotations:
    argocd.argoproj.io/sync-wave: "4"
spec:
  components:
    - kind: clair
      managed: true
    - kind: horizontalpodautoscaler
      managed: true
    - kind: mirror
      managed: true
    - kind: monitoring
      managed: true
    - kind: postgres
      managed: true
    - kind: redis
      managed: true
    - kind: objectstorage
      managed: true
    - kind: route
      managed: true
    - kind: tls
      managed: true
    - kind: quay
      managed: true
    - kind: clairpostgres
      managed: true
  configBundleSecret: quay-init-config-bundle-secret
