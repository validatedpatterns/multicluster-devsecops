---
# Source: pipelines/templates/app-pipeline/rbac/pipeline-sa.yaml
apiVersion: v1
kind: ServiceAccount
imagePullSecrets:
- name: image-registry-credentials
metadata:
  name: pipeline
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    argocd.argoproj.io/syncOptions: ServerSideApply=true
secrets:
  - name: acs-api-token
  - name: git-secret
  - name: quay-pull-secret
---
# Source: pipelines/templates/app-pipeline/rbac/registry-credential-sa.yaml
apiVersion: v1
kind: ServiceAccount
imagePullSecrets:
- name: image-registry-credentials
metadata:
  name: pipeline-svc
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
secrets:
  - name: quay-api-token
  - name: acs-api-token
  - name: quay-pull-secret
---
# Source: pipelines/templates/app-pipeline/configmaps/argocd-en-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-env-configmap
  namespace: devsecops-ci
data:
  ARGOCD_SERVER: development-gitops-server.multicluster-devsecops-development.svc:443
---
# Source: pipelines/templates/app-pipeline/configmaps/maven-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: maven-settings
data:
  settings.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <settings>
      <servers>
        <server>
          <id>nexus</id>
          <username>admin</username>
          <password>admin123</password>
        </server>
      </servers>
      <mirrors>
        <mirror>
          <id>nexus</id>
          <name>nexus</name>
          <url>http://nexus:8081/repository/maven-public/</url>
          <mirrorOf>*</mirrorOf>
        </mirror>
      </mirrors>
    </settings>
---
# Source: pipelines/templates/chains/tekton-chains-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chains-config
  namespace: openshift-pipelines
  annotations:
    argocd.argoproj.io/sync-options: PruneLast=true
    argocd.argoproj.io/sync-options: ServerSideApply=true
data:
  artifacts.oci.storage: 'oci'
  artifacts.taskrun.format: tekton
  artifacts.taskrun.storage: tekton
  artifacts.oci.format: simplesigning
  artifacts.oci.signer: cosign
---
# Source: pipelines/templates/environment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: environment
data:
  DESCRIPTION: "Config keys for openshift-pipelines"
---
# Source: pipelines/templates/app-pipeline/storageclass/vp-storageClass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
allowVolumeExpansion: true
metadata:
  name: default-rwo-vp
parameters:
  encrypted: "true"
  type: default-rwo
provisioner: 
reclaimPolicy: Delete
volumeBindingMode: Immediate
---
# Source: pipelines/templates/app-pipeline/pvcs/pipeline-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pipeline-pvc
  namespace: devsecops-ci
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
spec:
  resources:
    requests:
      storage: 5Gi
  storageClassName: gp3-csi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
---
# Source: pipelines/templates/app-pipeline/rbac/imagestream-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: imagestream-view
rules:
- apiGroups:
  - image.openshift.io
  resources:
  - imagestreams
  verbs:
  - get
- apiGroups:
  - image.openshift.io
  resources:
  - imagestreamimports
  verbs:
  - create
---
# Source: pipelines/templates/app-pipeline/tasks/task-crda-scan.yaml
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: crda-scan
spec:
  params:
    - default: pom.xml
      description: the path and manifest that should be scanned
      name: manifest
      type: string
    - default: spring-petclinic
      description: application folder name
      name: application_folder
      type: string
  steps:
    - image: quay.io/jchraibi/crda-image:0.1
      name: crda-code-scan
      resources: {}
      script: >
        #!/usr/bin/env bash

        set +x

        export NO_COLOR="True"

        echo "---"   echo "Installing tar"

        chmod +x /crda > /dev/null

        echo "## Scanning application manifest $(params.manifest)"

        /crda config set consent_telemetry false

        /crda auth -t b6eb51e7-af6c-4bdb-b006-3005711316ca

        /crda analyse
        $(workspaces.source.path)/$(params.application_folder)/$(params.manifest)

        echo "## Scan finished ##"
  workspaces:
    - description: The workspace consisting of maven project.
      name: source
---
# Source: pipelines/templates/app-pipeline/tasks/task-image-scan-task.yaml
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: rox-image-scan
spec:
  params:
    - name: rox_central_endpoint
      type: string
      description: the address:port tuple for StackRox Central (example - rox.stackrox.io:443)
      default: 'central-stackrox.:443'
    - name: rox_api_token
      type: string
      description: Secret containing the StackRox API token with CI permissions
      default: acs-api-token
    - name: image
      type: string
      description: Full name of image to scan (example -- gcr.io/rox/sample:5.0-rc1)
    - name: output_format
      type: string
      description:  Output format (json | csv | table)
      default: json
    - name: image_digest
      description:  Digest in sha256 hash format of the image to scan
      type: string
  steps:
    - name: rox-image-scan
      image: registry.access.redhat.com/ubi8/ubi-minimal:latest
      env:
        - name: ROX_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.rox_api_token)
              key: token
        - name: ROX_CENTRAL_ENDPOINT
          value: $(params.rox_central_endpoint)
      script: |
        #!/usr/bin/env bash
        set +x
        export NO_COLOR="True"
        curl -k -L -H "Authorization: Bearer $ROX_API_TOKEN" https://$ROX_CENTRAL_ENDPOINT/api/cli/download/roxctl-linux --output ./roxctl  > /dev/null; echo "Getting roxctl"
        chmod +x ./roxctl > /dev/null
        echo "## Scanning image $(params.image)@$(params.image_digest)"
        ./roxctl image scan --insecure-skip-tls-verify -e $ROX_CENTRAL_ENDPOINT --image $(params.image)@$(params.image_digest) --output $(params.output_format)
        echo "## Go to https://$ROX_CENTRAL_ENDPOINT/main/vulnerability-management/image/$(params.image_digest) to check more info"
---
# Source: pipelines/templates/app-pipeline/tasks/task-rox-deployment-check.yaml
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: rox-deployment-check
spec:
  params:
    - name: GIT_REPOSITORY
      type: string
    - name: rox_central_endpoint
      type: string
      description: Secret containing the address:port tuple for StackRox Central (example - rox.stackrox.io:443)
      default: 'central-stackrox.:443'
    - name: rox_api_token
      type: string
      default: acs-api-token
      description: Secret containing the StackRox API token with CI permissions
    - name: file
      type: string
      description: YAML file in the deployfiles workspace
    - name: deployment_files_path
      type: string
      description: Path/Folder for the k8s deployment files to check
  results:
      - name: check_output
        description: Output of `roxctl deployment check`
  workspaces:
    - description: The workspace consisting of maven project.
      name: workspace
  steps:

    - name: git-clone
      image: image-registry.openshift-image-registry.svc:5000/openshift/tools
      workingDir: $(workspaces.workspace.path)
      script: |
        rm -rf git-update-digest-workdir
        git clone $(params.GIT_REPOSITORY) git-update-digest-workdir
        cd git-update-digest-workdir/$(params.deployment_files_path)

    - name: rox-deployment-check
      image: registry.access.redhat.com/ubi8/ubi-minimal:latest
      workingDir: $(workspaces.workspace.path)
      env:
        - name: ROX_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.rox_api_token)
              key: token
        - name: ROX_CENTRAL_ENDPOINT
          value: $(params.rox_central_endpoint)
      script: |
        #!/usr/bin/env bash
        set +x
        cd git-update-digest-workdir/$(params.deployment_files_path)
        cat $(params.file)
        curl -k -L -H "Authorization: Bearer $ROX_API_TOKEN" https://$ROX_CENTRAL_ENDPOINT/api/cli/download/roxctl-linux --output ./roxctl  > /dev/null; echo "Getting roxctl"
        chmod +x ./roxctl  > /dev/null
        ./roxctl deployment check --insecure-skip-tls-verify -e $ROX_CENTRAL_ENDPOINT -f $(params.file)
---
# Source: pipelines/templates/app-pipeline/tasks/task-rox-image-check.yaml
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: rox-image-check
spec:
  params:
    - description: >-
        Secret containing the address:port tuple for StackRox Central (example -
        rox.stackrox.io:443)
      name: rox_central_endpoint
      default: 'central-stackrox.:443'
      type: string
    - description: Secret containing the StackRox API token with CI permissions
      name: rox_api_token
      type: string
    - description: 'Full name of image to scan (example -- gcr.io/rox/sample:5.0-rc1)'
      name: image
      type: string
    - name: image_digest
      description:  Digest in sha256 hash format of the image to check
      type: string
  results:
    - description: Output of `roxctl image check`
      name: check_output
  steps:
    - env:
        - name: ROX_API_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: $(params.rox_api_token)
        - name: ROX_CENTRAL_ENDPOINT
          value: $(params.rox_central_endpoint)
      image: registry.access.redhat.com/ubi8/ubi-minimal:latest
      name: rox-image-check
      resources: {}
      script: >-
        #!/usr/bin/env bash

        set +x

        curl -k -L -H "Authorization: Bearer $ROX_API_TOKEN"
        https://$ROX_CENTRAL_ENDPOINT/api/cli/download/roxctl-linux --output
        ./roxctl  > /dev/null; echo "Getting roxctl"

        chmod +x ./roxctl  > /dev/null

        ./roxctl image check --insecure-skip-tls-verify -e $ROX_CENTRAL_ENDPOINT
        --image $(params.image)@$(params.image_digest)
---
# Source: pipelines/templates/app-pipeline/imageStreams/imagestream-devsecops.yaml
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: spring-petclinic
  namespace: devsecops-ci
---
# Source: pipelines/templates/app-pipeline/devsecops-rh-fixed.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: devsecops-rh-v2-fixed
spec:
  params:
  - default: https://github.com/hybrid-cloud-demos/spring-petclinic
    description: The application git repository
    name: APP_SOURCE_GIT
    type: string
  - default: main
    description: The application git revision
    name: APP_SOURCE_REVISION
    type: string
  - default: https://github.com/hybrid-cloud-demos/spring-petclinic-config 
    description: The application manifests git repository
    name: APP_MANIFESTS_GIT
    type: string
  - default: latest
    description: The application image tag to build
    name: APP_IMAGE_TAG
    type: string
  - default: devsecops-dev
    description: The namespace for Stage environments
    name: DEV_NAMESPACE
    type: string
  - default: https://github.com/hybrid-cloud-patterns/spring-petclinic-gatling
    description: The application test cases git repository
    name: APP_TESTS_GIT
    type: string
  - description: Git username to update GitOps files
    name: GIT_USERNAME
    type: string
    default: PLAINTEXT
  - description: Git password to update GitOps files
    name: GIT_PASSWORD
    type: string
    default: openshift
  - description: Copy FROM path
    name: FROM_PATH
    type: string
    default: environments/dev
  - description: Copy TO path
    name: TO_PATH
    type: string
    default: environments/staging
  tasks:
  - name: create-promote-pull-request
    params:
      - name: GIT_REPOSITORY
        value: $(params.APP_MANIFESTS_GIT)
      - name: GIT_USERNAME
        value: $(params.GIT_USERNAME)
      - name: GIT_PASSWORD
        value: $(params.GIT_PASSWORD)
      - name: COPY_FROM_PATH
        value: $(params.FROM_PATH)
      - name: COPY_TO_PATH
        value: $(params.TO_PATH)
    runAfter:
      - pentesting-test
      - performance-test
    taskRef:
      kind: Task
      name: create-promote-pull-request
    workspaces:
      - name: workspace
        workspace: workspace
  - name: source-clone
    params:
    - name: url
      value: $(params.APP_SOURCE_GIT)
    - name: revision
      value: $(params.APP_SOURCE_REVISION)
    - name: depth
      value: "0"
    - name: subdirectory
      value: spring-petclinic
    - name: deleteExisting
      value: "true"
    taskRef:
      kind: ClusterTask
      name: git-clone
    workspaces:
    - name: output
      workspace: workspace
  - name: unit-tests
    params:
    - name: GOALS
      value:
      - package
      - -f
      - spring-petclinic
    runAfter:
    - crda-scan
    taskRef:
      kind: Task
      name: maven
    workspaces:
    - name: source
      workspace: workspace
    - name: maven-settings
      workspace: maven-settings
  - name: code-analysis
    params:
    - name: GOALS
      value:
      - install
      - sonar:sonar
      - -f
      - spring-petclinic
      - -Dsonar.host.url=http://sonarqube:9000
      - -Dsonar.userHome=/tmp/sonar
      - -DskipTests=true
    runAfter:
    - crda-scan
    taskRef:
      kind: Task
      name: maven
    workspaces:
    - name: source
      workspace: workspace
    - name: maven-settings
      workspace: maven-settings
  - name: dependency-report
    params:
    - name: SOURCE_DIR
      value: spring-petclinic
    runAfter:
    - crda-scan
    taskRef:
      kind: Task
      name: dependency-report
    workspaces:
    - name: source
      workspace: workspace
    - name: maven-settings
      workspace: maven-settings
  - name: release-app
    params:
    - name: GOALS
      value:
      - deploy
      - -f
      - spring-petclinic
      - -DskipTests=true
      - -DaltDeploymentRepository=nexus::default::http://nexus:8081/repository/maven-releases/
      - -DaltSnapshotDeploymentRepository=nexus::default::http://nexus:8081/repository/maven-snapshots/
    runAfter:
    - code-analysis
    - unit-tests
    - dependency-report
    taskRef:
      kind: Task
      name: maven
    workspaces:
    - name: source
      workspace: workspace
    - name: maven-settings
      workspace: maven-settings
  - name: build-image
    params:
    - name: TLSVERIFY
      value: "false"
    - name: MAVEN_MIRROR_URL
      value: http://nexus:8081/repository/maven-public/
    - name: PATH_CONTEXT
      value: spring-petclinic/target
    - name: IMAGE_NAME
      #jrickard - value: quay-registry-quay-quay-enterprise./openshift_AUTOMATED/spring-petclinic
      value: quay-registry-quay-quay-enterprise./devel/spring-petclinic
    - name: IMAGE_TAG
      value: $(params.APP_IMAGE_TAG)
    runAfter:
    - syft-sbom
    taskRef:
      kind: Task
      name: s2i-java-11-fixed
    workspaces:
    - name: source
      workspace: workspace
  - name: image-scan
    params:
    - name: image
      #jrickard - value: quay-registry-quay-quay-enterprise./openshift_AUTOMATED/spring-petclinic
      value: quay-registry-quay-quay-enterprise./devel/spring-petclinic
    - name: rox_api_token
      value: acs-api-token
    - name: output_format
      value: table
    - name: image_digest
      value: $(tasks.build-image.results.IMAGE_DIGEST)
    runAfter:
    - build-image
    taskRef:
      kind: ClusterTask
      name: rox-image-scan
  - name: image-check
    params:
    - name: image
      #jrickard - value: quay-registry-quay-quay-enterprise./openshift_AUTOMATED/spring-petclinic
      value: quay-registry-quay-quay-enterprise./devel/spring-petclinic
    - name: rox_api_token
      value: acs-api-token
# jrickard removed
#    - name: rox_central_endpoint
#      value: roxsecrets
    - name: image_digest
      value: $(tasks.build-image.results.IMAGE_DIGEST)
    runAfter:
    - build-image
    taskRef:
      kind: ClusterTask
      name: rox-image-check
  - name: deploy-check
    params:
    - name: GIT_REPOSITORY
      value: $(params.APP_MANIFESTS_GIT)
    - name: rox_api_token
      value: acs-api-token
# jrickard removed
#    - name: rox_central_endpoint
#      value: roxsecrets
    - name: file
      value: deployment.yaml
    - name: deployment_files_path
      value: app
    runAfter:
    - build-image
    taskRef:
      kind: ClusterTask
      name: rox-deployment-check
    workspaces:
    - name: workspace
      workspace: workspace
  - name: update-deployment
    params:
    - name: GIT_REPOSITORY
      value: $(params.APP_MANIFESTS_GIT)
    - name: GIT_USERNAME
      value: gogs
    - name: GIT_PASSWORD
      value: gogs
    - name: CURRENT_IMAGE
      value: quay.io/hybridcloudpatterns/spring-petclinic:latest
    - name: NEW_IMAGE
      #jrickard-value: quay-registry-quay-quay-enterprise./openshift_AUTOMATED/spring-petclinic
      value: quay-registry-quay-quay-enterprise./devel/spring-petclinic
    - name: NEW_DIGEST
      value: $(tasks.build-image.results.IMAGE_DIGEST)
    - name: KUSTOMIZATION_PATH
      value: environments/dev
    runAfter:
    - image-scan
    - image-check
    - deploy-check
    taskRef:
      kind: Task
      name: git-update-deployment
    workspaces:
    - name: workspace
      workspace: workspace
  - name: perf-tests-clone
    params:
    - name: url
      value: $(params.APP_TESTS_GIT)
    - name: subdirectory
      value: spring-petclinic-gatling
    - name: deleteExisting
      value: "true"
    runAfter:
    - update-deployment
    taskRef:
      kind: ClusterTask
      name: git-clone
    workspaces:
    - name: output
      workspace: workspace
  - name: pentesting-test
    params:
    - name: APP_URL
      value: http://spring-petclinic.$(params.DEV_NAMESPACE).svc.cluster.local:8080
    runAfter:
    - perf-tests-clone
    taskRef:
      kind: Task
      name: zap-proxy
    workspaces:
    - name: workspace
      workspace: workspace
  - name: performance-test
    params:
    - name: APP_URL
      value: http://spring-petclinic.$(params.DEV_NAMESPACE).svc.cluster.local:8080
    runAfter:
    - perf-tests-clone
    taskRef:
      kind: Task
      name: gatling
    workspaces:
    - name: simulations
      subPath: spring-petclinic-gatling
      workspace: workspace
  - name: crda-scan
    params:
    - name: manifest
      value: pom.xml
    runAfter:
    - source-clone
    taskRef:
      kind: ClusterTask
      name: crda-scan
    workspaces:
    - name: source
      workspace: workspace
  - name: syft-sbom
    params:
    - name: APP_PATH
      value: $(workspaces.source.path)
    runAfter:
    - release-app
    taskRef:
      kind: Task
      name: syft-sbom
    workspaces:
    - name: source
      workspace: workspace
  workspaces:
  - name: workspace
  - name: maven-settings
---
# Source: pipelines/templates/app-pipeline/devsecops-rh.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: devsecops-rh-v2
spec:
  params:
  - default: https://github.com/hybrid-cloud-demos/spring-petclinic
    description: The application git repository
    name: APP_SOURCE_GIT
    type: string
  - default: main
    description: The application git revision
    name: APP_SOURCE_REVISION
    type: string
  - default: https://github.com/hybrid-cloud-demos/spring-petclinic-config 
    description: The application manifests git repository
    name: APP_MANIFESTS_GIT
    type: string
  - default: latest
    description: The application image tag to build
    name: APP_IMAGE_TAG
    type: string
  - default: devsecops-dev
    description: The namespace for Stage environments
    name: DEV_NAMESPACE
    type: string
  - default: https://github.com/hybrid-cloud-patterns/spring-petclinic-gatling
    description: The application test cases git repository
    name: APP_TESTS_GIT
    type: string
  - description: Git username to update GitOps files
    name: GIT_USERNAME
    type: string
    default: PLAINTEXT
  - description: Git password to update GitOps files
    name: GIT_PASSWORD
    type: string
    default: openshift
  - description: Copy FROM path
    name: FROM_PATH
    type: string
    default: environments/dev
  - description: Copy TO path
    name: TO_PATH
    type: string
    default: environments/staging
  tasks:
  - name: create-promote-pull-request
    params:
      - name: GIT_REPOSITORY
        value: $(params.APP_MANIFESTS_GIT)
      - name: GIT_USERNAME
        value: $(params.GIT_USERNAME)
      - name: GIT_PASSWORD
        value: $(params.GIT_PASSWORD)
      - name: COPY_FROM_PATH
        value: $(params.FROM_PATH)
      - name: COPY_TO_PATH
        value: $(params.TO_PATH)
    runAfter:
      - pentesting-test
      - performance-test
    taskRef:
      kind: Task
      name: create-promote-pull-request
    workspaces:
      - name: workspace
        workspace: workspace
  - name: source-clone
    params:
    - name: url
      value: $(params.APP_SOURCE_GIT)
    - name: revision
      value: $(params.APP_SOURCE_REVISION)
    - name: depth
      value: "0"
    - name: subdirectory
      value: spring-petclinic
    - name: deleteExisting
      value: "true"
    taskRef:
      kind: ClusterTask
      name: git-clone
    workspaces:
    - name: output
      workspace: workspace
  - name: unit-tests
    params:
    - name: GOALS
      value:
      - package
      - -f
      - spring-petclinic
    runAfter:
    - crda-scan
    taskRef:
      kind: Task
      name: maven
    workspaces:
    - name: source
      workspace: workspace
    - name: maven-settings
      workspace: maven-settings
  - name: code-analysis
    params:
    - name: GOALS
      value:
      - install
      - sonar:sonar
      - -f
      - spring-petclinic
      - -Dsonar.host.url=http://sonarqube:9000
      - -Dsonar.userHome=/tmp/sonar
      - -DskipTests=true
    runAfter:
    - crda-scan
    taskRef:
      kind: Task
      name: maven
    workspaces:
    - name: source
      workspace: workspace
    - name: maven-settings
      workspace: maven-settings
  - name: dependency-report
    params:
    - name: SOURCE_DIR
      value: spring-petclinic
    runAfter:
    - crda-scan
    taskRef:
      kind: Task
      name: dependency-report
    workspaces:
    - name: source
      workspace: workspace
    - name: maven-settings
      workspace: maven-settings
  - name: release-app
    params:
    - name: GOALS
      value:
      - deploy
      - -f
      - spring-petclinic
      - -DskipTests=true
      - -DaltDeploymentRepository=nexus::default::http://nexus:8081/repository/maven-releases/
      - -DaltSnapshotDeploymentRepository=nexus::default::http://nexus:8081/repository/maven-snapshots/
    runAfter:
    - code-analysis
    - unit-tests
    - dependency-report
    taskRef:
      kind: Task
      name: maven
    workspaces:
    - name: source
      workspace: workspace
    - name: maven-settings
      workspace: maven-settings
  - name: build-image
    params:
    - name: TLSVERIFY
      value: "false"
    - name: MAVEN_MIRROR_URL
      value: http://nexus:8081/repository/maven-public/
    - name: PATH_CONTEXT
      value: spring-petclinic/target
    - name: IMAGE_NAME
      #jrickard - value: quay-registry-quay-quay-enterprise./openshift_AUTOMATED/spring-petclinic
      value: quay-registry-quay-quay-enterprise./devel/spring-petclinic
    - name: IMAGE_TAG
      value: $(params.APP_IMAGE_TAG)
    runAfter:
    - syft-sbom
    taskRef:
      kind: Task
      name: s2i-java-11
    workspaces:
    - name: source
      workspace: workspace
  - name: image-scan
    params:
    - name: image
      #jrickard - value: quay-registry-quay-quay-enterprise./openshift_AUTOMATED/spring-petclinic
      value: quay-registry-quay-quay-enterprise./devel/spring-petclinic
    - name: rox_api_token
      value: acs-api-token
    - name: output_format
      value: table
    - name: image_digest
      value: $(tasks.build-image.results.IMAGE_DIGEST)
    runAfter:
    - build-image
    taskRef:
      kind: ClusterTask
      name: rox-image-scan
  - name: image-check
    params:
    - name: image
      #jrickard - value: quay-registry-quay-quay-enterprise./openshift_AUTOMATED/spring-petclinic
      value: quay-registry-quay-quay-enterprise./devel/spring-petclinic
    - name: rox_api_token
      value: acs-api-token
# jrickard removed
#    - name: rox_central_endpoint
#      value: roxsecrets
    - name: image_digest
      value: $(tasks.build-image.results.IMAGE_DIGEST)
    runAfter:
    - build-image
    taskRef:
      kind: ClusterTask
      name: rox-image-check
  - name: deploy-check
    params:
    - name: GIT_REPOSITORY
      value: $(params.APP_MANIFESTS_GIT)
    - name: rox_api_token
      value: acs-api-token
# jrickard removed
#    - name: rox_central_endpoint
#      value: roxsecrets
    - name: file
      value: deployment.yaml
    - name: deployment_files_path
      value: app
    runAfter:
    - build-image
    taskRef:
      kind: ClusterTask
      name: rox-deployment-check
    workspaces:
    - name: workspace
      workspace: workspace
  - name: update-deployment
    params:
    - name: GIT_REPOSITORY
      value: $(params.APP_MANIFESTS_GIT)
    - name: GIT_USERNAME
      value: gogs
    - name: GIT_PASSWORD
      value: gogs
    - name: CURRENT_IMAGE
      value: quay.io/hybridcloudpatterns/spring-petclinic:latest
    - name: NEW_IMAGE
      #jrickard-value: quay-registry-quay-quay-enterprise./openshift_AUTOMATED/spring-petclinic
      value: quay-registry-quay-quay-enterprise./devel/spring-petclinic
    - name: NEW_DIGEST
      value: $(tasks.build-image.results.IMAGE_DIGEST)
    - name: KUSTOMIZATION_PATH
      value: environments/dev
    runAfter:
    - image-scan
    - image-check
    - deploy-check
    taskRef:
      kind: Task
      name: git-update-deployment
    workspaces:
    - name: workspace
      workspace: workspace
  - name: perf-tests-clone
    params:
    - name: url
      value: $(params.APP_TESTS_GIT)
    - name: subdirectory
      value: spring-petclinic-gatling
    - name: deleteExisting
      value: "true"
    runAfter:
    - update-deployment
    taskRef:
      kind: ClusterTask
      name: git-clone
    workspaces:
    - name: output
      workspace: workspace
  - name: pentesting-test
    params:
    - name: APP_URL
      value: http://spring-petclinic.$(params.DEV_NAMESPACE).svc.cluster.local:8080
    runAfter:
    - perf-tests-clone
    taskRef:
      kind: Task
      name: zap-proxy
    workspaces:
    - name: workspace
      workspace: workspace
  - name: performance-test
    params:
    - name: APP_URL
      value: http://spring-petclinic.$(params.DEV_NAMESPACE).svc.cluster.local:8080
    runAfter:
    - perf-tests-clone
    taskRef:
      kind: Task
      name: gatling
    workspaces:
    - name: simulations
      subPath: spring-petclinic-gatling
      workspace: workspace
  - name: crda-scan
    params:
    - name: manifest
      value: pom.xml
    runAfter:
    - source-clone
    taskRef:
      kind: ClusterTask
      name: crda-scan
    workspaces:
    - name: source
      workspace: workspace
  - name: syft-sbom
    params:
    - name: APP_PATH
      value: $(workspaces.source.path)
    runAfter:
    - release-app
    taskRef:
      kind: Task
      name: syft-sbom
    workspaces:
    - name: source
      workspace: workspace
  workspaces:
  - name: workspace
  - name: maven-settings
---
# Source: pipelines/templates/app-pipeline/simple-pipeline.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: simple-pipeline
spec:
  params:
  - default: https://github.com/hybrid-cloud-demos/spring-petclinic
    description: The application git repository
    name: APP_SOURCE_GIT
    type: string
  - default: main
    description: The application git revision
    name: APP_SOURCE_REVISION
    type: string
  - default: https://github.com/hybrid-cloud-demos/spring-petclinic-config
    description: The application manifests git repository
    name: APP_MANIFESTS_GIT
    type: string
  - default: latest
    description: The application image tag to build
    name: APP_IMAGE_TAG
    type: string
  - default: devsecops-dev
    description: The namespace for Stage environments
    name: DEV_NAMESPACE
    type: string
  - default: https://github.com/hybrid-cloud-patterns/spring-petclinic-gatling
    description: The application test cases git repository
    name: APP_TESTS_GIT
    type: string
  - description: Git username to update GitOps files
    name: GIT_USERNAME
    type: string
    default: PLAINTEXT
  - description: Git password to update GitOps files
    name: GIT_PASSWORD
    type: string
    default: openshift
  - description: Copy FROM path
    name: FROM_PATH
    type: string
    default: environments/dev
  - description: Copy TO path
    name: TO_PATH
    type: string
    default: environments/stage
  tasks:
  - name: create-promote-pull-request
    params:
      - name: GIT_REPOSITORY
        value: $(params.APP_MANIFESTS_GIT)
      - name: GIT_USERNAME
        value: $(params.GIT_USERNAME)
      - name: GIT_PASSWORD
        value: $(params.GIT_PASSWORD)
      - name: COPY_FROM_PATH
        value: $(params.FROM_PATH)
      - name: COPY_TO_PATH
        value: $(params.TO_PATH)
    runAfter:
      - pentesting-test
      - performance-test
    taskRef:
      kind: Task
      name: create-promote-pull-request
    workspaces:
      - name: workspace
        workspace: workspace
  - name: source-clone
    params:
    - name: url
      value: $(params.APP_SOURCE_GIT)
    - name: revision
      value: $(params.APP_SOURCE_REVISION)
    - name: depth
      value: "0"
    - name: subdirectory
      value: spring-petclinic
    - name: deleteExisting
      value: "true"
    taskRef:
      kind: ClusterTask
      name: git-clone
    workspaces:
    - name: output
      workspace: workspace
  - name: release-app
    params:
    - name: GOALS
      value:
      - deploy
      - -f
      - spring-petclinic
      - -DskipTests=true
      - -DaltDeploymentRepository=nexus::default::http://nexus:8081/repository/maven-releases/
      - -DaltSnapshotDeploymentRepository=nexus::default::http://nexus:8081/repository/maven-snapshots/
    runAfter:
    - source-clone
    taskRef:
      kind: Task
      name: maven
    workspaces:
    - name: source
      workspace: workspace
    - name: maven-settings
      workspace: maven-settings
  - name: build-image
    params:
    - name: TLSVERIFY
      value: "false"
    - name: MAVEN_MIRROR_URL
      value: http://nexus:8081/repository/maven-public/
    - name: PATH_CONTEXT
      value: spring-petclinic/target
    - name: IMAGE_NAME
      value: quay-registry-quay-quay-enterprise./devel//spring-petclinic
    - name: IMAGE_TAG
      value: $(params.APP_IMAGE_TAG)
    runAfter:
    - syft-sbom
    taskRef:
      kind: Task
      name: s2i-java-11
    workspaces:
    - name: source
      workspace: workspace
  - name: image-scan
    params:
    - name: image
      value: quay-registry-quay-quay-enterprise./devel//spring-petclinic
    - name: rox_api_token
      value: acs-api-token
    - name: output_format
      value: table
    - name: image_digest
      value: $(tasks.build-image.results.IMAGE_DIGEST)
    runAfter:
    - build-image
    taskRef:
      kind: ClusterTask
      name: rox-image-scan
  - name: image-check
    params:
    - name: image
      value: quay-registry-quay-quay-enterprise./devel//spring-petclinic
    - name: rox_api_token
      value: acs-api-token
    - name: image_digest
      value: $(tasks.build-image.results.IMAGE_DIGEST)
    runAfter:
    - build-image
    taskRef:
      kind: ClusterTask
      name: rox-image-check
  - name: deploy-check
    params:
    - name: GIT_REPOSITORY
      value: $(params.APP_MANIFESTS_GIT)
    - name: rox_api_token
      value: acs-api-token
    - name: file
      value: deployment.yaml
    - name: deployment_files_path
      value: app
    runAfter:
    - build-image
    taskRef:
      kind: ClusterTask
      name: rox-deployment-check
    workspaces:
    - name: workspace
      workspace: workspace
  - name: update-deployment
    params:
    - name: GIT_REPOSITORY
      value: $(params.APP_MANIFESTS_GIT)
    - name: GIT_USERNAME
      value: $(params.GIT_USERNAME)
    - name: GIT_PASSWORD
      value: $(params.GIT_PASSWORD)
    - name: CURRENT_IMAGE
      value: quay.io/hybridcloudpatterns/spring-petclinic:latest
    - name: NEW_IMAGE
      value: quay-registry-quay-quay-enterprise./devel//spring-petclinic
    - name: NEW_DIGEST
      value: $(tasks.build-image.results.IMAGE_DIGEST)
    - name: KUSTOMIZATION_PATH
      value: environments/dev
    runAfter:
    - image-scan
    - image-check
    - deploy-check
    taskRef:
      kind: Task
      name: git-update-deployment
    workspaces:
    - name: workspace
      workspace: workspace
  - name: perf-tests-clone
    params:
    - name: url
      value: $(params.APP_TESTS_GIT)
    - name: subdirectory
      value: spring-petclinic-gatling
    - name: deleteExisting
      value: "true"
    runAfter:
    - update-deployment
    taskRef:
      kind: ClusterTask
      name: git-clone
    workspaces:
    - name: output
      workspace: workspace
  - name: pentesting-test
    params:
    - name: APP_URL
      value: http://spring-petclinic.$(params.DEV_NAMESPACE).svc.cluster.local:8080
    runAfter:
    - perf-tests-clone
    taskRef:
      kind: Task
      name: zap-proxy
    workspaces:
    - name: workspace
      workspace: workspace
  - name: performance-test
    params:
    - name: APP_URL
      value: http://spring-petclinic.$(params.DEV_NAMESPACE).svc.cluster.local:8080
    runAfter:
    - perf-tests-clone
    taskRef:
      kind: Task
      name: gatling
    workspaces:
    - name: simulations
      subPath: spring-petclinic-gatling
      workspace: workspace
  - name: syft-sbom
    params:
    - name: APP_PATH
      value: $(workspaces.source.path)
    runAfter:
    - release-app
    taskRef:
      kind: Task
      name: syft-sbom
    workspaces:
    - name: source
      workspace: workspace
  workspaces:
  - name: workspace
  - name: maven-settings
---
# Source: pipelines/templates/app-pipeline/tasks/task-create-promote-pull-request.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: git
  name: create-promote-pull-request
  labels:
    app.kubernetes.io/version: '0.1'
    operator.tekton.dev/provider-type: community
spec:
  description: This Task can be used to update image digest in a Git repo using kustomize
  params:
    - name: GIT_REPOSITORY
      type: string
    - name: GIT_USERNAME
      type: string
    - name: GIT_PASSWORD
      type: string
    - name: COPY_FROM_PATH
      type: string
    - name: COPY_TO_PATH
      type: string
  results:
    - description: The branch name used for pull-request
      name: branch_name
  steps:
    - image: image-registry.openshift-image-registry.svc:5000/openshift/tools
      name: promote
      resources: {}
      script: >
        set -x

        rm -rf pull-request-workdir

        git clone $(params.GIT_REPOSITORY) pull-request-workdir

        cd pull-request-workdir

        git config user.email "pipelines-ci@redhat.com"

        git config user.name "pipelines-ci"


        branch_name=ci-$(context.taskRun.name)

        git checkout -b $branch_name

        echo -n "$branch_name" > $(results.branch_name.path)


        /bin/cp -rf $(params.COPY_FROM_PATH)/* $(params.COPY_TO_PATH)


        git status

        git add $(params.COPY_TO_PATH)

        git commit -m "[$(context.taskRun.name)] Promotion from
        $(params.COPY_FROM_PATH) to $(params.COPY_TO_PATH)"


        git remote add auth-origin $(echo $(params.GIT_REPOSITORY) | sed -E
        "s#http://(.*)#http://$(params.GIT_USERNAME):$(params.GIT_PASSWORD)@\1#g")

        git push -u auth-origin HEAD
      workingDir: $(workspaces.workspace.path)
    - image: quay.io/siamaksade/python-oc
      name: create-pull-request
      resources: {}
      script: >
        #!/usr/bin/env python3


        import os

        import requests 


        gitea_user = "$(params.GIT_USERNAME)"

        gitea_pwd = "$(params.GIT_PASSWORD)"

        giteaURL = "http://gitea-AUTOMATED."


        branch_result = open("$(results.branch_name.path)")

        git_branch = branch_result.read()

        branch_result.close()


        print("Git server: " + giteaURL)

        print("Branch name: " + git_branch)


        pr_title = "[$(context.taskRun.name)] Promote to STAGE environment"

        pr_body = "TaskRun $(context.taskRun.name)\\nPromoting application from
        DEV to STAGE environment"

        data_pr = '{"base": "master","body": "' + pr_body + '","head": "' +
        git_branch + '","title": "' + pr_title + '"}'

        headers = {'Content-Type': 'application/json'}

        resp = requests.post(url = giteaURL + "/api/v1/repos/" + gitea_user +
        "/spring-petclinic-config/pulls", 
                            headers = headers, 
                            auth = (gitea_user, gitea_pwd), 
                            data = data_pr) 
                             

        if resp.status_code != 200:
          print("Error creating pull-request (status code: {})".format(resp.status_code))
          print(resp.content)
        else:
          print("Created pull-request.")
      workingDir: $(workspaces.workspace.path)
  workspaces:
    - description: The workspace consisting of maven project.
      name: workspace
---
# Source: pipelines/templates/app-pipeline/tasks/task-dependency-report.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: dependency-report
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
spec:
  params:
    - name: SOURCE_DIR
      description: The directory within the workspace where application source is located
      default: "."
    - name: REPORTS_REPO_HOST
      description: The reports repository host based on https://github.com/chmouel/openshift-django-uploader
      default: http://reports-repo:8080
    - name: REPORTS_REPO_USERNAME
      description: The reports repository username
      default: reports
    - name: REPORTS_REPO_PASSWORD
      description: The reports repository password
      default: reports
    - default: ''
      description: The Maven repository mirror url
      name: MAVEN_MIRROR_URL
      type: string
    - default: ''
      description: The username for the proxy server
      name: PROXY_USER
      type: string
    - default: ''
      description: The password for the proxy server
      name: PROXY_PASSWORD
      type: string
    - default: ''
      description: Port number for the proxy server
      name: PROXY_PORT
      type: string
    - default: ''
      description: Proxy server Host
      name: PROXY_HOST
      type: string
    - default: ''
      description: Non proxy server host
      name: PROXY_NON_PROXY_HOSTS
      type: string
    - default: http
      description: Protocol for the proxy ie http or https
      name: PROXY_PROTOCOL
      type: string
  workspaces:
    - description: The workspace consisting of maven project.
      name: source
    - description: The workspace consisting of the custom maven settings provided by the user.
      name: maven-settings
  steps:
    - image: 'registry.access.redhat.com/ubi8/ubi-minimal:latest'
      name: mvn-settings
      resources: {}
      script: >
        #!/usr/bin/env bash


        [[ -f $(workspaces.maven-settings.path)/settings.xml ]] && \

        echo 'using existing $(workspaces.maven-settings.path)/settings.xml' &&
        exit 0


        cat > $(workspaces.maven-settings.path)/settings.xml <<EOF

        <settings>
          <mirrors>
            <!-- The mirrors added here are generated from environment variables. Don't change. -->
            <!-- ### mirrors from ENV ### -->
          </mirrors>
          <proxies>
            <!-- The proxies added here are generated from environment variables. Don't change. -->
            <!-- ### HTTP proxy from ENV ### -->
          </proxies>
        </settings>

        EOF


        xml=""

        if [ -n "$(params.PROXY_HOST)" -a -n "$(params.PROXY_PORT)" ]; then
          xml="<proxy>\
            <id>genproxy</id>\
            <active>true</active>\
            <protocol>$(params.PROXY_PROTOCOL)</protocol>\
            <host>$(params.PROXY_HOST)</host>\
            <port>$(params.PROXY_PORT)</port>"
          if [ -n "$(params.PROXY_USER)" -a -n "$(params.PROXY_PASSWORD)" ]; then
            xml="$xml\
                <username>$(params.PROXY_USER)</username>\
                <password>$(params.PROXY_PASSWORD)</password>"
          fi
          if [ -n "$(params.PROXY_NON_PROXY_HOSTS)" ]; then
            xml="$xml\
                <nonProxyHosts>$(params.PROXY_NON_PROXY_HOSTS)</nonProxyHosts>"
          fi
          xml="$xml\
              </proxy>"
          sed -i "s|<!-- ### HTTP proxy from ENV ### -->|$xml|" $(workspaces.maven-settings.path)/settings.xml
        fi


        if [ -n "$(params.MAVEN_MIRROR_URL)" ]; then
          xml="    <mirror>\
            <id>mirror.default</id>\
            <url>$(params.MAVEN_MIRROR_URL)</url>\
            <mirrorOf>central</mirrorOf>\
          </mirror>"
          sed -i "s|<!-- ### mirrors from ENV ### -->|$xml|" $(workspaces.maven-settings.path)/settings.xml
        fi
    - args:
        - -Dmaven.repo.local=$(workspaces.source.path)/.m2
        - -f
        - $(params.SOURCE_DIR)
        - -s
        - $(workspaces.maven-settings.path)/settings.xml
        - site
        - -DskipTests=true
      command:
        - /usr/bin/mvn
      image: gcr.io/cloud-builders/mvn
      name: mvn-goals
      resources: {}
      workingDir: $(workspaces.source.path)
    - name: archive-site
      workingDir: $(workspaces.source.path)
      image: registry.access.redhat.com/ubi8/ubi:latest
      env:
        - name: PIPELINERUN_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
      script: |
        #!/usr/bin/env bash

        for f in $(find $(params.SOURCE_DIR)/target/site -type f); do
          curl -u $(params.REPORTS_REPO_USERNAME):$(params.REPORTS_REPO_PASSWORD) -F path=$PIPELINERUN_NAME/${f} -X POST -F file=@${f} $(params.REPORTS_REPO_HOST)/upload; echo ""
        done
---
# Source: pipelines/templates/app-pipeline/tasks/task-gatling.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: gatling
spec:
  params:
  - name: DURATION
    description: The duration of running simulations
    type: string
    default: "30"
  - name: CONCURRENT_USERS
    description: The number of concurrent users
    type: string
    default: "10"
  - name: APP_URL
    description: The application under test url
    type: string
  - name: REPORTS_REPO_HOST
    description: The reports repository host based on https://github.com/chmouel/openshift-django-uploader
    default: http://reports-repo:8080
  - name: REPORTS_REPO_USERNAME
    description: The reports repository username
    default: reports
  - name: REPORTS_REPO_PASSWORD
    description: The reports repository password
    default: reports
  workspaces:
  - description: The workspace consisting of maven project.
    name: simulations
  steps:
    - name: run-tests
      image: quay.io/hybridcloudpatterns/gatling:latest
      env:
        - name: PIPELINERUN_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
      script: |
        #!/usr/bin/env bash

        set -x

        cd /opt/gatling/
        ls -lhrt

        # set simulation params
        export JAVA_OPTS="-DtestDuration=$(params.CONCURRENT_USERS) -DuserCount=$(params.DURATION) -Dserver=$(params.APP_URL)"

        # run simulation
        /opt/gatling/bin/gatling.sh -rd "Spring PetClinic Performance Test" -sf $(workspaces.simulations.path)

        # upload results
        REPORT=$(ls -td /opt/gatling/results/* | head -1)
        for f in $(find $REPORT/ -type f); do
          curl -u $(params.REPORTS_REPO_USERNAME):$(params.REPORTS_REPO_PASSWORD) -F path=$PIPELINERUN_NAME${f#/opt/gatling/results} -X POST -F file=@${f} $(params.REPORTS_REPO_HOST)/upload; echo ""
        done
---
# Source: pipelines/templates/app-pipeline/tasks/task-git-update-deployment.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: git
  name: git-update-deployment
  labels:
    app.kubernetes.io/version: '0.1'
    operator.tekton.dev/provider-type: community
spec:
  description: This Task can be used to update image digest in a Git repo using kustomize
  params:
    - name: GIT_REPOSITORY
      type: string
    - name: GIT_USERNAME
      type: string
    - name: GIT_PASSWORD
      type: string
    - name: CURRENT_IMAGE
      type: string
    - name: NEW_IMAGE
      type: string
    - name: NEW_DIGEST
      type: string
    - name: KUSTOMIZATION_PATH
      type: string
  workspaces:
    - description: The workspace consisting of maven project.
      name: workspace

  results:
    - name: commit
      description: The commit SHA

  steps:
    - name: git-clone
      image: image-registry.openshift-image-registry.svc:5000/openshift/tools
      workingDir: $(workspaces.workspace.path)
      script: |
        rm -rf git-update-digest-workdir
        git clone $(params.GIT_REPOSITORY) git-update-digest-workdir

    - name: update-digest
      image: k8s.gcr.io/kustomize/kustomize:v3.8.7
      workingDir: $(workspaces.workspace.path)
      script: |
        cd git-update-digest-workdir/$(params.KUSTOMIZATION_PATH)
        /app/kustomize edit set image $(params.CURRENT_IMAGE)=$(params.NEW_IMAGE)@$(params.NEW_DIGEST)

        echo "##########################"
        echo "### kustomization.yaml ###"
        echo "##########################"
        cat kustomization.yaml

    - name: git-commit
      image: image-registry.openshift-image-registry.svc:5000/openshift/tools
      workingDir: $(workspaces.workspace.path)
      script: |
        cd git-update-digest-workdir
        git config user.email "tekton-pipelines-ci@redhat.com"
        git config user.name "tekton-pipelines-ci"

        git status
        git add $(params.KUSTOMIZATION_PATH)/kustomization.yaml
        # git commit -m "[$(context.pipelineRun.name)] Image digest updated"
        git commit -m "[ci] Image digest updated"

        git remote add auth-origin $(echo $(params.GIT_REPOSITORY) | sed -E "s#http://(.*)#http://$(params.GIT_USERNAME):$(params.GIT_PASSWORD)@\1#g")
        git push auth-origin main

        RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
        EXIT_CODE="$?"
        if [ "$EXIT_CODE" != 0 ]
        then
          exit $EXIT_CODE
        fi
        # Make sure we don't add a trailing newline to the result!
        echo -n "$RESULT_SHA" > $(results.commit.path)
---
# Source: pipelines/templates/app-pipeline/tasks/task-github-pull-request.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: github-open-pr
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/categories: Git
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: github
    tekton.dev/displayName: "open github pull request"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This task will open a PR on Github based on several parameters.
    This could be useful in GitOps repositories for example.

  params:
  - name: GITHUB_HOST_URL
    description: |
      The GitHub host, adjust this if you run a GitHub enteprise.
    default: "api.github.com"
    type: string

  - name: API_PATH_PREFIX
    description: |
      The API path prefix, GitHub Enterprise has a prefix e.g. /api/v3
    default: ""
    type: string

  - name: REPO_FULL_NAME
    description: |
      The GitHub repository full name, e.g.: tektoncd/catalog
    type: string

  - name: GITHUB_TOKEN_SECRET_NAME
    description: |
      The name of the kubernetes secret that contains the GitHub token, default: github
    type: string
    default: github

  - name: GITHUB_TOKEN_SECRET_KEY
    description: |
      The key within the kubernetes secret that contains the GitHub token, default: token
    type: string
    default: token

  - name: AUTH_TYPE
    description: |
      The type of authentication to use. You could use the less secure "Basic" for example
    type: string
    default: Bearer

  - name: HEAD
    description: |
      The name of the branch where your changes are implemented.
    type: string

  - name: BASE
    description: |
      The name of the branch you want the changes pulled into.
    type: string

  - name: BODY
    description: |
      The body description of the pull request.
    type: string

  - name: TITLE
    description: |
      The title of the pull request.
    type: string

  results:
    - name: NUMBER
      description: Number of the created pull request.

    - name: URL
      description: URL of the created pull request.

  volumes:
  - name: githubtoken
    secret:
      secretName: $(params.GITHUB_TOKEN_SECRET_NAME)

  steps:
    - name: open-pr
      volumeMounts:
        - name: githubtoken
          readOnly: true
          mountPath: /etc/github-open-pr
      env:
        - name: PULLREQUEST_NUMBER_PATH
          value: $(results.NUMBER.path)
        - name: PULLREQUEST_URL_PATH
          value: $(results.URL.path)

      image: registry.access.redhat.com/ubi8/python-38:1-34.1599745032
      script: |
        #!/usr/libexec/platform-python

        """This script will open a PR on Github"""

        import json
        import os
        import sys
        import http.client

        github_token = open("/etc/github-open-pr/$(params.GITHUB_TOKEN_SECRET_KEY)", "r").read()

        open_pr_url = "$(params.API_PATH_PREFIX)" + "/repos/$(params.REPO_FULL_NAME)/pulls"

        data = {
            "head": "$(params.HEAD)",
            "base": "$(params.BASE)",
            "title": "$(params.TITLE)",
            "body": """$(params.BODY)"""
        }
        print("Sending this data to GitHub: ")
        print(data)

        authHeader = "$(params.AUTH_TYPE) " + github_token

        # This is for our fake github server
        if "$(params.GITHUB_HOST_URL)".startswith("http://"):
            conn = http.client.HTTPConnection("$(params.GITHUB_HOST_URL)"
                                              .replace("http://", ""))
        else:
            conn = http.client.HTTPSConnection("$(params.GITHUB_HOST_URL)")

        conn.request(
            "POST",
            open_pr_url,
            body=json.dumps(data),
            headers={
                "User-Agent": "TektonCD, the peaceful cat",
                "Authorization": authHeader,
                "Accept": "application/vnd.github.v3+json ",
            })
        resp = conn.getresponse()
        if not str(resp.status).startswith("2"):
            print("Error: %d" % (resp.status))
            print(resp.read())
            sys.exit(1)
        else:
            # https://docs.github.com/en/rest/reference/pulls#create-a-pull-request
            body = json.loads(resp.read().decode())

            open(os.environ.get('PULLREQUEST_NUMBER_PATH'), 'w').write(f'{body["number"]}')
            open(os.environ.get('PULLREQUEST_URL_PATH'), 'w').write(body["html_url"])

            print("GitHub pull request created for $(params.REPO_FULL_NAME): "
                  f'number={body["number"]} url={body["html_url"]}')
---
# Source: pipelines/templates/app-pipeline/tasks/task-mvn.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: build-tool
  name: maven
  labels:
    app.kubernetes.io/version: '0.1'
    operator.tekton.dev/provider-type: community
spec:
  description: This Task can be used to run a Maven build.
  params:
    - default: gcr.io/cloud-builders/mvn:3.5.0-jdk-8
      description: Maven base image
      name: MAVEN_IMAGE
      type: string
    - default:
        - package
      description: maven goals to run
      name: GOALS
      type: array
    - default: ''
      description: The Maven repository mirror url
      name: MAVEN_MIRROR_URL
      type: string
    - default: ''
      description: The username for the proxy server
      name: PROXY_USER
      type: string
    - default: ''
      description: The password for the proxy server
      name: PROXY_PASSWORD
      type: string
    - default: ''
      description: Port number for the proxy server
      name: PROXY_PORT
      type: string
    - default: ''
      description: Proxy server Host
      name: PROXY_HOST
      type: string
    - default: ''
      description: Non proxy server host
      name: PROXY_NON_PROXY_HOSTS
      type: string
    - default: http
      description: Protocol for the proxy ie http or https
      name: PROXY_PROTOCOL
      type: string
  workspaces:
    - description: The workspace consisting of maven project.
      name: source
    - description: The workspace consisting of the custom maven settings provided by the user.
      name: maven-settings
  steps:
    - image: 'registry.access.redhat.com/ubi8/ubi-minimal:latest'
      name: mvn-settings
      resources: {}
      script: >
        #!/usr/bin/env bash


        [[ -f $(workspaces.maven-settings.path)/settings.xml ]] && \

        echo 'using existing $(workspaces.maven-settings.path)/settings.xml' &&
        exit 0


        cat > $(workspaces.maven-settings.path)/settings.xml <<EOF

        <settings>
          <mirrors>
            <!-- The mirrors added here are generated from environment variables. Don't change. -->
            <!-- ### mirrors from ENV ### -->
          </mirrors>
          <proxies>
            <!-- The proxies added here are generated from environment variables. Don't change. -->
            <!-- ### HTTP proxy from ENV ### -->
          </proxies>
        </settings>

        EOF


        xml=""

        if [ -n "$(params.PROXY_HOST)" -a -n "$(params.PROXY_PORT)" ]; then
          xml="<proxy>\
            <id>genproxy</id>\
            <active>true</active>\
            <protocol>$(params.PROXY_PROTOCOL)</protocol>\
            <host>$(params.PROXY_HOST)</host>\
            <port>$(params.PROXY_PORT)</port>"
          if [ -n "$(params.PROXY_USER)" -a -n "$(params.PROXY_PASSWORD)" ]; then
            xml="$xml\
                <username>$(params.PROXY_USER)</username>\
                <password>$(params.PROXY_PASSWORD)</password>"
          fi
          if [ -n "$(params.PROXY_NON_PROXY_HOSTS)" ]; then
            xml="$xml\
                <nonProxyHosts>$(params.PROXY_NON_PROXY_HOSTS)</nonProxyHosts>"
          fi
          xml="$xml\
              </proxy>"
          sed -i "s|<!-- ### HTTP proxy from ENV ### -->|$xml|" $(workspaces.maven-settings.path)/settings.xml
        fi


        if [ -n "$(params.MAVEN_MIRROR_URL)" ]; then
          xml="    <mirror>\
            <id>mirror.default</id>\
            <url>$(params.MAVEN_MIRROR_URL)</url>\
            <mirrorOf>central</mirrorOf>\
          </mirror>"
          sed -i "s|<!-- ### mirrors from ENV ### -->|$xml|" $(workspaces.maven-settings.path)/settings.xml
        fi
    - args:
        - -Dmaven.repo.local=$(workspaces.source.path)/.m2
        - '-s'
        - $(workspaces.maven-settings.path)/settings.xml
        - $(params.GOALS)
      command:
        - /usr/bin/mvn
      image: $(params.MAVEN_IMAGE)
      name: mvn-goals
      workingDir: $(workspaces.source.path)
      resources:
        requests:
          memory: 512Mi
          cpu: 200m
        limits:
          memory: 4Gi
          cpu: '1'
---
# Source: pipelines/templates/app-pipeline/tasks/task-s2i-java-11-fixed.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/displayName: s2i java 11
    tekton.dev/pipelines.minVersion: 0.11.3
    tekton.dev/tags: s2i, java, workspace
  name: s2i-java-11-fixed
spec:
  description: s2i-java-11 task clones a Git repository and builds and pushes a container
    image using S2I and a Java 11 builder image.
  params:
  - default: .
    description: The location of the path to run s2i from
    name: PATH_CONTEXT
    type: string
  - default: "true"
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS
      registry)
    name: TLSVERIFY
    type: string
  - default: ""
    description: Additional Maven arguments
    name: MAVEN_ARGS_APPEND
    type: string
  - default: "false"
    description: Remove the Maven repository after the artifact is built
    name: MAVEN_CLEAR_REPO
    type: string
  - default: ""
    description: The base URL of a mirror used for retrieving artifacts
    name: MAVEN_MIRROR_URL
    type: string
  - description: Location of the repo where image has to be pushed
    name: IMAGE_NAME
    type: string
  - default: latest
    description: The tag of the image to be pushed
    name: IMAGE_TAG
    type: string
  results:
  - description: Digest of the image just built.
    name: IMAGE_DIGEST
  - description: URL of the image used by Tekton Chains to push the OCI images
    name: IMAGE_URL  
  steps:
  - args:
    - |-
      echo "MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)" > env-file

      [[ '$(params.MAVEN_ARGS_APPEND)' != "" ]] &&
        echo "MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)" >> env-file

      [[ '$(params.MAVEN_MIRROR_URL)' != "" ]] &&
        echo "MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)" >> env-file

      echo "Generated Env file"
      echo "------------------------------"
      cat env-file
      echo "------------------------------"
    command:
    - /bin/sh
    - -c
    image: registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8@sha256:562dbdac04ae9260e21d457585b3251fd8cc5310966f8fc544fb77dc544c92f8
    name: gen-env-file
    resources: {}
    volumeMounts:
    - mountPath: /env-params
      name: envparams
    workingDir: /env-params
    securityContext:
      capabilities:
        add: ["SETFCAP"]

  - command:
    - s2i
    - build
    - $(params.PATH_CONTEXT)
    - image-registry.openshift-image-registry.svc:5000/openshift/java:11
    - --image-scripts-url
    - image:///usr/local/s2i
    - --as-dockerfile
    - /gen-source/Dockerfile.gen
    - --environment-file
    - /env-params/env-file
    image: registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8@sha256:562dbdac04ae9260e21d457585b3251fd8cc5310966f8fc544fb77dc544c92f8
    name: generate
    resources: {}
    volumeMounts:
    - mountPath: /gen-source
      name: gen-source
    - mountPath: /env-params
      name: envparams
    workingDir: $(workspaces.source.path)
    securityContext:
      capabilities:
        add: ["SETFCAP"]

  - command:
    - buildah
    - bud
    - --storage-driver=vfs
    - --tls-verify=$(params.TLSVERIFY)
    - --layers
    - -f
    - /gen-source/Dockerfile.gen
    - -t
    - $(params.IMAGE_NAME):$(params.IMAGE_TAG)
    - -t
    - $(params.IMAGE_NAME):latest
    - .
    image: registry.redhat.io/rhel8/buildah@sha256:180c4d9849b6ab0e5465d30d4f3a77765cf0d852ca1cb1efb59d6e8c9f90d467
    name: build
    resources: {}
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /gen-source
      name: gen-source
    workingDir: /gen-source
    securityContext:
      capabilities:
        add: ["SETFCAP"]
  - command:
    - /bin/sh
    - -c
    args:
    - |-
      buildah from --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) '$(params.IMAGE_NAME):$(params.IMAGE_TAG)' > imgname
      buildah run --user=root --storage-driver=vfs `cat imgname` -- sh -c `dnf update -y`
      buildah run --user=root --storage-driver=vfs `cat imgname` -- sh -c 'rpm -e $(rpm -qa *dnf*) $(rpm -qa *libsolv*) $(rpm -qa *hawkey*) $(rpm -qa yum*) $(rpm -qa *dnf*) $(rpm -qa *subscription-manager*)'
      buildah run --user=root --storage-driver=vfs `cat imgname` -- sh -c 'rpm -e $(rpm -qa *rpm*)'
      buildah commit --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) `cat imgname` '$(params.IMAGE_NAME):$(params.IMAGE_TAG)'
    image: registry.redhat.io/rhel8/buildah@sha256:180c4d9849b6ab0e5465d30d4f3a77765cf0d852ca1cb1efb59d6e8c9f90d467
    name: update
    resources: {}
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /gen-source
      name: gen-source
    workingDir: /gen-source
    securityContext:
      capabilities:
        add: ["SETFCAP"]

  - command:
    - /bin/sh
    - -c
    args:
    - |-
      buildah from --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) '$(params.IMAGE_NAME):$(params.IMAGE_TAG)' > imgname
      buildah run --user=root --storage-driver=vfs `cat imgname` -- sh -c `dnf update -y`
      buildah run --user=root --storage-driver=vfs `cat imgname` -- sh -c 'rpm -e $(rpm -qa *dnf*) $(rpm -qa *libsolv*) $(rpm -qa *hawkey*) $(rpm -qa yum*) $(rpm -qa *dnf*) $(rpm -qa *subscription-manager*)'
      buildah run --user=root --storage-driver=vfs `cat imgname` -- sh -c 'rpm -e $(rpm -qa *rpm*)'
      buildah commit --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) `cat imgname` '$(params.IMAGE_NAME):$(params.IMAGE_TAG)'
    image: registry.redhat.io/rhel8/buildah@sha256:180c4d9849b6ab0e5465d30d4f3a77765cf0d852ca1cb1efb59d6e8c9f90d467
    name: remove-package-mgr
    resources: {}
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /gen-source
      name: gen-source
    workingDir: /gen-source
    securityContext:
      capabilities:
        add: ["SETFCAP"]

  - command:
    - buildah
    - push
    - --storage-driver=vfs
    - --tls-verify=$(params.TLSVERIFY)
    - --digestfile
    - $(workspaces.source.path)/image-digest
    - $(params.IMAGE_NAME):$(params.IMAGE_TAG)
    - docker://$(params.IMAGE_NAME):$(params.IMAGE_TAG)
    image: registry.redhat.io/rhel8/buildah@sha256:180c4d9849b6ab0e5465d30d4f3a77765cf0d852ca1cb1efb59d6e8c9f90d467
    name: push-tag
    resources: {}
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    securityContext:
      capabilities:
        add: ["SETFCAP"]

  - command:
    - buildah
    - push
    - --storage-driver=vfs
    - --tls-verify=$(params.TLSVERIFY)
    - --digestfile
    - $(workspaces.source.path)/image-digest
    - $(params.IMAGE_NAME):$(params.IMAGE_TAG)
    - docker://$(params.IMAGE_NAME):latest
    image: registry.redhat.io/rhel8/buildah@sha256:180c4d9849b6ab0e5465d30d4f3a77765cf0d852ca1cb1efb59d6e8c9f90d467
    name: push-latest
    resources: {}
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    securityContext:
      capabilities:
        add: ["SETFCAP"]

  - image: registry.redhat.io/rhel8/buildah@sha256:180c4d9849b6ab0e5465d30d4f3a77765cf0d852ca1cb1efb59d6e8c9f90d467
    name: digest-to-results
    resources: {}
    script: cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST; echo quay-registry-quay-quay-enterprise./openshift_AUTOMATED/spring-petclinic > /tekton/results/IMAGE_URL
  volumes:
  - emptyDir: {}
    name: varlibcontainers
  - emptyDir: {}
    name: gen-source
  - emptyDir: {}
    name: envparams
  workspaces:
  - mountPath: /workspace/source
    name: source
---
# Source: pipelines/templates/app-pipeline/tasks/task-s2i-java-11.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-java-11
  annotations:
    tekton.dev/displayName: s2i java 11
    tekton.dev/pipelines.minVersion: 0.11.3
    tekton.dev/tags: 's2i, java, workspace'
spec:
  description: >-
    s2i-java-11 task clones a Git repository and builds and pushes a container
    image using S2I and a Java 11 builder image.
  params:
    - default: .
      description: The location of the path to run s2i from
      name: PATH_CONTEXT
      type: string
    - default: 'true'
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: TLSVERIFY
      type: string
    - default: ''
      description: Additional Maven arguments
      name: MAVEN_ARGS_APPEND
      type: string
    - default: 'false'
      description: Remove the Maven repository after the artifact is built
      name: MAVEN_CLEAR_REPO
      type: string
    - default: ''
      description: The base URL of a mirror used for retrieving artifacts
      name: MAVEN_MIRROR_URL
      type: string
    - description: Location of the repo where image has to be pushed
      name: IMAGE_NAME
      type: string
    - description: The tag of the image to be pushed
      name: IMAGE_TAG
      type: string
      default: "latest"
  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built.
  steps:
    - args:
        - |-
          echo "MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)" > env-file

          [[ '$(params.MAVEN_ARGS_APPEND)' != "" ]] &&
            echo "MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)" >> env-file

          [[ '$(params.MAVEN_MIRROR_URL)' != "" ]] &&
            echo "MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)" >> env-file

          echo "Generated Env file"
          echo "------------------------------"
          cat env-file
          echo "------------------------------"
      command:
        - /bin/sh
        - '-c'
      image: >-
        registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8@sha256:562dbdac04ae9260e21d457585b3251fd8cc5310966f8fc544fb77dc544c92f8
      name: gen-env-file
      resources: {}
      volumeMounts:
        - mountPath: /env-params
          name: envparams
      workingDir: /env-params
      securityContext:
        capabilities:
          add: ["SETFCAP"]
    - command:
        - s2i
        - build
        - $(params.PATH_CONTEXT)
        - 'image-registry.openshift-image-registry.svc:5000/openshift/java:11'
        - '--image-scripts-url'
        - 'image:///usr/local/s2i'
        - '--as-dockerfile'
        - /gen-source/Dockerfile.gen
        - '--environment-file'
        - /env-params/env-file
      image: >-
        registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8@sha256:562dbdac04ae9260e21d457585b3251fd8cc5310966f8fc544fb77dc544c92f8
      name: generate
      resources: {}
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
        - mountPath: /env-params
          name: envparams
      workingDir: $(workspaces.source.path)
      securityContext:
        capabilities:
          add: ["SETFCAP"]
    - command:
        - buildah
        - bud
        - '--storage-driver=vfs'
        - '--tls-verify=$(params.TLSVERIFY)'
        - '--layers'
        - '-f'
        - /gen-source/Dockerfile.gen
        - '-t'
        - $(params.IMAGE_NAME):$(params.IMAGE_TAG)
        - '-t'
        - $(params.IMAGE_NAME):latest
        - .
      image: >-
        registry.redhat.io/rhel8/buildah@sha256:180c4d9849b6ab0e5465d30d4f3a77765cf0d852ca1cb1efb59d6e8c9f90d467
      name: build
      resources: {}
      securityContext:
        capabilities:
          add: ["SETFCAP"]
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source
      workingDir: /gen-source
    - command:
        - buildah
        - push
        - '--storage-driver=vfs'
        - '--tls-verify=$(params.TLSVERIFY)'
        - --digestfile
        - $(workspaces.source.path)/image-digest
        - $(params.IMAGE_NAME):$(params.IMAGE_TAG)
        - 'docker://$(params.IMAGE_NAME):$(params.IMAGE_TAG)'
      image: registry.redhat.io/rhel8/buildah@sha256:180c4d9849b6ab0e5465d30d4f3a77765cf0d852ca1cb1efb59d6e8c9f90d467
      name: push-tag
      resources: {}
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      securityContext:
        capabilities:
          add: ["SETFCAP"]
    - command:
        - buildah
        - push
        - '--storage-driver=vfs'
        - '--tls-verify=$(params.TLSVERIFY)'
        - --digestfile
        - $(workspaces.source.path)/image-digest
        - $(params.IMAGE_NAME):$(params.IMAGE_TAG)
        - 'docker://$(params.IMAGE_NAME):latest'
      image: registry.redhat.io/rhel8/buildah@sha256:180c4d9849b6ab0e5465d30d4f3a77765cf0d852ca1cb1efb59d6e8c9f90d467
      name: push-latest
      resources: {}
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      securityContext:
        capabilities:
          add: ["SETFCAP"]
    - name: digest-to-results
      image: registry.redhat.io/rhel8/buildah@sha256:180c4d9849b6ab0e5465d30d4f3a77765cf0d852ca1cb1efb59d6e8c9f90d467
      script: cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
  volumes:
    - emptyDir: {}
      name: varlibcontainers
    - emptyDir: {}
      name: gen-source
    - emptyDir: {}
      name: envparams
  workspaces:
    - mountPath: /workspace/source
      name: source
---
# Source: pipelines/templates/app-pipeline/tasks/task-syft-sbom.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: build-tool
  name: syft-sbom
  labels:
    app.kubernetes.io/version: '0.1'
    operator.tekton.dev/provider-type: community
spec:
  description: This Task can be used to generate a SBOM file with Syft.
  params:
    - default: $(workspaces.source.path)
      description: Application folder to scan
      name: APP_PATH
      type: string
  steps:
    - image: 'registry.access.redhat.com/ubi8/ubi:latest'
      name: syft-scan
      resources: {}
      script: >
        #!/usr/bin/env bash

        echo '## Getting Syft ##' 

        pwd

        curl -sSfL
        https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s
        -- -b . 

        chmod +x ./syft

        echo '## Scanning folder and generating SBOM ##' 

        ./syft $(params.APP_PATH) -o spdx-json=sbom.json

        echo '## SBOM content ##' 

        cat ./sbom.json
  workspaces:
    - description: The workspace consisting of maven project.
      name: source
---
# Source: pipelines/templates/app-pipeline/tasks/task-zap-proxy.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: git
  name: zap-proxy
  labels:
    app.kubernetes.io/version: '0.1'
    operator.tekton.dev/provider-type: community
spec:
  description: This Task can be used to update image digest in a Git repo using kustomize
  params:
    - name: REPORTS_REPO_USERNAME
      description: The reports repository username
      default: reports
    - name: REPORTS_REPO_PASSWORD
      description: The reports repository password
      default: reports
    - name: APP_URL
      description: The application under test url
    - name: REPORTS_REPO_HOST
      description: The reports repository host based on https://github.com/chmouel/openshift-django-uploader
      default: http://reports-repo:8080
  workspaces:
    - description: The workspace for the zap proxy task
      name: workspace

  steps:
    - name: zap-proxy
      image: quay.io/hybridcloudpatterns/zap2docker-stable
      env:
        - name: PIPELINERUN_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
      workingDir: $(workspaces.workspace.path)
      script: |
        #!/usr/bin/env bash

        set -x

        echo "Make the wrk directory available to save the reports"
        cd /zap
        mkdir /zap/wrk

        echo "Starting the pentesting..."
        /zap/zap-baseline.py -t $(params.APP_URL) -r $PIPELINERUN_NAME.html

        ls -lhrt /zap/wrk

        echo "Uploading the report into the report server"
        curl -u $(params.REPORTS_REPO_USERNAME):$(params.REPORTS_REPO_PASSWORD) -F path=$PIPELINERUN_NAME/$PIPELINERUN_NAME.html -F file=@/zap/wrk/$PIPELINERUN_NAME.html -X POST $(params.REPORTS_REPO_HOST)/upload; echo ""
---
# Source: pipelines/templates/chains/tekton-chain.yaml
apiVersion: operator.tekton.dev/v1alpha1
kind: TektonChain
metadata:
  name: chain
spec:
  targetNamespace: openshift-pipelines
